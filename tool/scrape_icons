#!/usr/bin/env node

const { resolve, basename, join } = require('path')

const x = require('x-ray')()
const yargs = require('yargs').argv
const { outputFile } = require('fs-extra')

const DEFAULT_TARGET_URL = 'https://erikflowers.github.io/weather-icons/'
const DEFAULT_FILE_NAME = 'weather_icons_g.dart'
const DEFAULT_TEST_FILE_PATH = resolve(__dirname, '../test')
const DEFAULT_TEST_FILE_NAME = 'weather_icons_g_test.dart'

const targetUrl = yargs.u || yargs.url || DEFAULT_TARGET_URL
const verbose = yargs.v || yargs.verbose || false
const print = yargs.p || yargs.print || false
const output = yargs.o || yargs.output
const filename = yargs.f || yargs.filename || DEFAULT_FILE_NAME

const resolvedOutput = output ? resolve(output) : undefined

const mainFilePath = join(resolvedOutput, filename)
const testFilePath = join(DEFAULT_TEST_FILE_PATH, DEFAULT_TEST_FILE_NAME)
const exampleFilePath = resolve(__dirname, '..', 'example/lib/util.dart')

const MANUAL_ICONS = [
  { title: 'wind', code: 'f0b1' },
  { title: 'wind-deg-0', code: 'f05c' },
  { title: 'wind-deg-45', code: 'f05a' },
  { title: 'wind-deg-90', code: 'f059' },
  { title: 'wind-deg-135', code: 'f05d' },
  { title: 'wind-deg-180', code: 'f060' },
  { title: 'wind-deg-225', code: 'f05e' },
  { title: 'wind-deg-270', code: 'f061' },
  { title: 'wind-deg-315', code: 'f05b' },
]

if (yargs.h || yargs.help) {
  return printUsage()
}

start().catch(err => {
  console.error(`Unhandled error: ${err}`)
  process.exit(1)
})

async function start() {
  if (!resolvedOutput) {
    console.log('Missing required flag "--output"')
    printUsage()
    return process.exit(1)
  }

  console.log('WeatherIcons scraper')
  const now = new Date()

  if (verbose) {
    console.log(`Target URL: ${targetUrl}`)
    console.log(`Print: ${print ? 'yes' : 'no'}`)
    console.log(`Output Path: ${resolvedOutput}`)
    console.log(`Filename: ${filename}`)
  }

  console.log(`Scraping: ${targetUrl}`)
  const rawIcons = await getIconData()
  console.log(`Scraped ${rawIcons.length} icons`)

  const generatedDartFile = generateDartFile(rawIcons, now)
  const generatedDartTestFile = generateTestFile(rawIcons, now)
  const generatedIconMapFile = genExampleIconMap(rawIcons, now)

  if (print) {
    console.log('Generated file:')
    console.log(generatedDartFile)
  }

  if (output) {
    await writeFile(mainFilePath, generatedDartFile)
    await writeFile(testFilePath, generatedDartTestFile)
    await writeFile(exampleFilePath, generatedIconMapFile)
  }
}

async function getIconData() {
  try {
    const result = await scrapeIconData()
    if (verbose) {
      result.forEach(({ title, code }) => console.log(`\t${title} => ${code}`))
    }

    return result.map(({ title, code }) => ({
      title: title.trim(),
      code: code.trim(),
    }))
  } catch (error) {
    console.error('Unable to scrape icon data!')
    console.error(error)
    process.exit(1)
  }
}

async function scrapeIconData() {
  const result = await scrape(targetUrl)
  const filtered = result
    .filter(item => !/(from|towards)-/.test(item.title))
    .reduce(
      (prev, curr) => {
        const isDupe = prev.icons.find(x => x.title === curr.title)
        if (verbose && isDupe)
          console.log(`Found duplicate: ${curr.title} => ${curr.code}`)
        isDupe ? prev.duplicates.push(curr) : prev.icons.push(curr)
        return prev
      },
      { icons: [], duplicates: [] },
    )

  if (filtered.duplicates.length)
    console.log(`Found ${filtered.duplicates.length} duplicates.`)

  return [...filtered.icons, ...MANUAL_ICONS]
}

function generateIcon(title, code) {
  const url = '[WeatherIcons](https://erikflowers.github.io/weather-icons/)'
  const name = title.replace('wi-', '').replace(/-/g, '_')
  let comment =
    title !== 'wind'
      ? `/// [IconData] for '${title}' from ${url}.`
      : `
  /// [IconData] for the base wind icon from ${url}.
  ///
  /// To achieve a rotated wind icon see [WindIcon].
    `.trim()

  if (title.includes('wind_deg')) {
    const deg = title.replace('wind_deg_', '')
    comment = `/// [IconData] for Wind direction at ${deg} degrees.`
  }

  const icon = `
  ${comment}
  static const IconData ${name} = const WIData(0x${code});`.trimLeft()

  if (verbose) console.log(`Generating: ${icon}`)
  return icon
}

function genHeader(date) {
  const script = basename(__filename)

  return `
/// GENERATED CODE
/// This file is auto-generated by the '${script}' script, and should not be modified by hand.
/// See the README.md for more information.
/// Generated on ${date}`.trim()
}

function generateDartFile(iconData, date) {
  const icons = iconData.map(({ title, code }) => generateIcon(title, code))

  const iconMap = iconData.map(({ title, code }) => `'${title}': ${title.replace('wi-', '').replace(/-/g, '_')},`)

  return `
${genHeader(date)}

import 'package:flutter/material.dart';

import 'package:weather_icons/src/util/wi_data.dart';

/// All of WeatherIcons in the form of static [IconData] variables.
///
/// See [WeatherIcons](${targetUrl}) for more info.
///
/// For getting a rotated wind icon, you can use [WindIcon] widget.
///
/// Sample Usage:
///
///     IconButton(
///       icon: new Icon(WeatherIcons.rain),
///       onPressed: () { print("Hello World"); }
///     );
class WeatherIcons {
  ${icons.join('\n\n  ')}

  /// Get the matching [IconData] from the WeatherIcon name.
  ///
  /// If you do not pass in a [fallback] then it will throw if it cannot find the icon.
  ///
  /// See [WeatherIcons](https://erikflowers.github.io/weather-icons/) for more info.
  ///
  /// Sample Usage:
  ///
  ///     IconButton(
  ///       icon: new Icon(WeatherIcons.fromString('wi-day-sunny')),
  ///       onPressed: () { print("Hello World"); }
  ///     );
  static IconData fromString(
    String name, {
    IconData fallback,
  }) {
    final target = name.replaceAll('_', '-');
    final exists = _all.containsKey(target);
    if (!exists && fallback == null) {
      throw UnsupportedError('Unsupported icon $name, with no fallback');
    }

    return exists ? _all[target] : fallback;
  }

  static const Map<String, IconData> _all = {
    ${iconMap.join('\n    ')}
  };
}
`.trimLeft()
}

function genExampleIconMap(iconData, date) {
  const iconMap = iconData.map(({ title, code }) => `'${title}': 0x${code},`)

  return `
class WeatherIconsUtil {
  static const int dateTimestamp = ${date.getTime()};

  static const Map<String, int> iconMap = {
    ${iconMap.join('\n    ')}
  };
}
`.trimLeft()
}

function generateTestFile(iconData, date) {
  const icons = iconData
    .map(({ title }) => title.replace('wi-', '').replace(/-/g, '_'))
    .map(title => {
      return `
  testWidgets('create WeatherIcons.${title}', (t) async {
    await _test(t, WeatherIcons.${title});
  });`.trim()
    })

  return `
${genHeader(date)}

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:weather_icons/weather_icons.dart';

import 'util/test_widget.dart';

/// Shorthand function for testing the icon.
///
/// Used to save space in generated file.
_test(WidgetTester t, IconData icon) async {
  await t.pumpWidget(TestWidget(child: Icon(icon)));
  expect(find.byIcon(icon), findsOneWidget);
}

/// One test for each of the generated [WeatherIcon] data.
void main() {
  ${icons.join('\n\n  ')}
}
`.trimLeft()
}

async function writeFile(path, dartCode) {
  try {
    console.log(`Writing to ${path}`)
    await outputFile(path, dartCode)
  } catch (error) {
    console.error('Unable to write dart file!')
    console.error(error)
    process.exit(1)
  }
}

function printUsage() {
  console.log(`Usage: scrape_icons --output /path/to/output [options]

  Scrapper for erikflowers/weather-icons.

  Options:

    --help     -h  Print this usage message
    --output   -o  File path to output the result to  (required)
    --url      -u  Provide a custom url to scrape     (default: 'https://erikflowers.github.io/weather-icons/')
    --verbose  -v  Log extra information to stdout    (default: false)
    --print    -p  Print the result to stdout         (default: false)
    --filename -f  Name of the file to generate       (default: weather_icon.dart)
  `)
}

function scrape(url) {
  return x(url, '.icon-wrap', [
    { title: '.icon-name', code: '.icon_unicode' },
  ]).then()
}
